@page "/posts/{postId:int}"
@using System.Security.Claims
@using ApiContracts

@using BlazorApp.Services
@inject IPostService PostService
@inject IUserService UserService
@inject ICommentService CommentService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthProvider

<h1 class="post-title">@post?.Title</h1>

<p class="post-body">@post?.Body</p>
<div class="add-comment-section">
    <button class="btn btn-primary" @onclick="ToAddComment">Add Comment</button>
</div>
@if (comments == null)
{
<p>Loading comments for this post...</p>
}
else if (!comments.Any())
{
<p>No comments found for this post.</p>
}
else
{
<h2>Comments</h2>
<div class="comments-container">
    @foreach (var comment in comments)
    {
    string username = "Unknown User";
    var user = users.FirstOrDefault(u => u.Id == comment.UserId);
    if (user != null)
    {
    username = user.Username;
    }

    <div class="comment-item">
        <div class="card comment-body">
            <div class="card-body">
                <p class="comment-text">@comment.Body</p>
                <small class="comment-author">Posted by: @username</small>
            </div>
        </div>
    </div>
    }
</div>
}

@code {
[Parameter] public int postId { get; set; }

private PostDto post;
private List<CommentDto> comments = new List<CommentDto>();
private List<UserDto> users = new List<UserDto>();
private string newCommentBody = string.Empty;
private bool isLoading = true;

protected override async Task OnInitializedAsync()
{
try
{
isLoading = true;
post = await PostService.GetPostAsync(postId);
comments = await CommentService.GetCommentsByPostId(postId);
users = await UserService.GetUsersAsync();
}
catch (Exception ex)
{
Console.Error.WriteLine($"Error fetching post details or comments: {ex.Message}");
}
finally
{
isLoading = false;
}
}
private void ToAddComment()
{
NavigationManager.NavigateTo($"/AddComment/{postId}");
}
}

<style>
    .post-title {
        font-size: 2rem;
        margin-bottom: 1rem;
    }
    .post-body {
        font-size: 1.2rem;
        margin-bottom: 1.5rem;
    }
    .add-comment-section {
        margin-bottom: 2rem;
    }
    .comments-container {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }
    .comment-item {
        display: flex;
        justify-content: flex-start;
        align-items: flex-start;
        font-family: Arial, sans-serif;
    }
    .comment-body {
        display: flex;
        flex-direction: column;
        justify-content: start;
        align-items: flex-start;
        background-color: #f3f4f6;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        width: 100%;
    }
    .comment-text {
        margin-bottom: 0.5rem;
        font-size: 1rem;
    }
    .comment-author {
        font-weight: bold;
        color: #c63e63;
    }
</style>